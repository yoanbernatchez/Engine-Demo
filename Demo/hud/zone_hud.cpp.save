#include <stdlib.h>
#include "hud_handler.h"
#include "zone_hud.h"
#include "../character/player.h"

/*---------------------------------------------------------------------------*/
/* Local function prototypes                                                 */
/*---------------------------------------------------------------------------*/

/**
 * @brief Slowly increases the zone hud's opacity until it's fully visible.
 *
 * @param hud:   Zone hud structure.
 * @param timer: Timer used for increasing the opacity with a time interval.
 *
 * @return True when the hud is fully visible, false otherwise.
 */
static bool show_region (EngHud *hud, double *timer);

/**
 * @brief Slowly dims the opacity of the zone hud.
 *
 * @param hud:   Zone hud structure.
 * @param timer: Timer used to dim the hud with a time interval.
 */
static void hide_region (EngHud *hud, double *timer);
/**
 * @brief Changes the zone texture of the zone hud according to the zone we
 *        send in parameters.
 *
 * @param renderer:     Renderer allowing us to create textures.
 * @param hud:          Zone hud structure.
 * @param object_index: Index of the text box in the hud structure.
 * @param zone:         Zone id.
 */
static void change_zone_text (SDL_Renderer *renderer, EngHud *hud, int object_index, int zone);
static void resize_zone_hud (EngHud *hud, SDL_Texture *texture);

/*---------------------------------------------------------------------------*/
/* Zone hud function implementations                                         */
/*---------------------------------------------------------------------------*/

/* Center the zone hud on screen. */
void
center_zone_hud(SDL_Window *window, EngHud *hud)
{
    int w = 0;
    int h = 0;

    SDL_GetWindowSize (window, &w, &h);

    eng_hud_move_hud_absolute (hud, w / 2 - hud->w / 2 - hud->border_size,
                               hud->y);
}

/*
 * Checks if we enter a new zone and if we need to update the texture
 * of the zone hud. If not, simply dims the zone hud until it's invisible.
 */
void
update_zone_hud (SDL_Window *window, SDL_Renderer *renderer, EngHud *hud,
                 EngCharacter player, double *timer)
{
    /* There is probably a better way to store this. */
    static int old_player_zone = 0;
    static int new_player_zone = 0;
    bool is_new_zone = false;

    /* Check if we enter a new zone. */
    old_player_zone == new_player_zone ? is_new_zone = false :
                                         is_new_zone = true;

    new_player_zone = player_get_zone (player);

    if (new_player_zone == -1) {
        old_player_zone = new_player_zone;
        is_new_zone = false;
    }
    /* If so, we change the text of the zone hud. */
    else if (is_new_zone) {
        change_zone_text (renderer, hud, 1, new_player_zone);
        resize_zone_hud (hud, hud->component[1].text);
        center_zone_hud (window, hud);

        hud[0].is_visible = true;

        if (show_region(&hud[0], timer)) {
            old_player_zone = new_player_zone;
        }
    }

    /* If not, we dim the zone hud until it's invisible. */
    if (!is_new_zone) {
        hide_region (hud, timer);
    }
}

/* Slowly increases the zone hud's opacity until it's fully visible. */
static bool
show_region (EngHud *hud, double *timer)
{
    int speed = 15;
    int delta_opacity = 20;
    int seconds_on_screen = 2;
    bool is_completed = false;

    /* We make the zone hud appear slowly on screen. */
    if (hud->border[0].opacity != 255 &&
        eng_has_time_elapsed (timer, true, ENG_MILLISECOND, delta_opacity)) {
        set_hud_opacity (hud, hud->border[0].opacity + speed);
    }

    if (hud->border[0].opacity == 255) {
        if (eng_has_time_elapsed (timer, true, ENG_SECOND, seconds_on_screen))
            set_hud_opacity (hud, 254);
    }

    if (hud->border[0].opacity == 254)
        is_completed = true;

    return is_completed;
}

/* Slowly dims the opacity of the zone hud. */
static void
hide_region (EngHud *hud, double *timer)
{
    int speed = 15;
    int delta_opacity = 20;

    /* If the hud is visible, we dim it until it disappears. */
    if (hud->is_visible) {
        if (eng_has_time_elapsed (timer, true, ENG_MILLISECOND, delta_opacity))
            set_hud_opacity(hud, hud->border[0].opacity - speed);

        if (hud->border[0].opacity == 0)
            hud->is_visible = false;
    }
}

/* Returns a hud structure that has been initialized with zone hud presets. */
EngHud
hud_create_zone_hud (SDL_Renderer *renderer)
{
    int window_x = 0;
    int window_y = 25;
    int window_w = 200;
    int window_h = 50;
    int window_border_size = 10;

    SDL_Color color = {255, 231, 185, 255};

    SDL_Rect background_dst = {0, 0, window_w, window_h};
    SDL_Rect vertical_border = {0, 0, 1, window_border_size};
    SDL_Rect horizontal_border = {0, 0, window_border_size, 1};
    SDL_Rect box_size = {0, 0, 200, 20};

    EngHud window = eng_hud_create_hud (window_x, window_y, window_w, window_h,
                                        window_border_size);

    eng_hud_add_background (&window, color, background_dst);
    eng_hud_set_border_src (&window, 1, vertical_border);
    eng_hud_set_border_src (&window, 3, vertical_border);
    eng_hud_set_border_src (&window, 0, horizontal_border);
    eng_hud_set_border_src (&window, 2, horizontal_border);

    eng_hud_add_textbox (&window, NULL, box_size);
    change_zone_text (renderer, &window, 1, -1);

    set_hud_opacity (&window, 0);
    window.is_visible = false;

    return window;
}

/* Changes the zone texture of the zone hud according to the zone we send in
 * parameters.
 */
static void
change_zone_text (SDL_Renderer *renderer, EngHud *hud, int object_index,
                  int zone)
{
    TTF_Font *font = TTF_OpenFont ("Demo/fonts/verdanab.ttf", 20);
    SDL_Color color = {155, 107, 13, 255};
    const char *zone_name;

    switch (zone) {
    case 0:
        zone_name = "My Room";
        break;
    case 1:
        zone_name = "Eastern Farm";
        break;
    case 2:
        zone_name = "Path Finding Demo";
        break;
    case 3:
        zone_name = "Zabura Village";
        break;
    case 4:
        zone_name = "Northern Farm";
        break;
    default:
        zone_name = " ";
        break;
    }

    SDL_Texture *zone_text = eng_create_textbox_texture(renderer,
                                                        (char*) zone_name,
                                                        font, color, 300);
    eng_hud_change_textbox_text (hud, object_index, zone_text);

    free ((char*) zone_name);
    TTF_CloseFont (font);
}

/**
 * @brief Resizes the zone hud based on a texture corresponding to text
 *        generated by TTF.
 *
 * @param hud:     Zone hud to resize.
 * @param texture: Texture generated by TTF which we take the size of.
 */
/*
 * Resizes the zone hud based on a texture corresponding to text
 * generated by TTF.
 */
static void
resize_zone_hud (EngHud *hud, SDL_Texture *texture)
{
    int w = 0;
    int h = 0;
    int margin = 5;

    SDL_QueryTexture (texture, NULL, NULL, &w, &h);

    eng_hud_resize_hud (hud, w + 2 * margin, h + 2 * margin);

    hud->component[0].dst.w = hud->w;
    hud->component[0].dst.h = hud->h;

    hud->component[1].dst.x = hud->x + hud->border_size + margin;
    hud->component[1].dst.y = hud->y + hud->border_size + margin;
    hud->component[1].dst.w = w;
    hud->component[1].dst.h = h;
}
